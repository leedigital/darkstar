const READ_WRITE="readwrite",READ_ONLY="readonly";class JustineDB{#openDBRequest;#dataBase;#map=new Map;constructor(){this.#openDBRequest=indexedDB.open("justine"),this.#openDBRequest.onupgradeneeded=e=>{const t=e.target.result,s=["page","settings","log"];for(const e of s)t.createObjectStore(e,{autoIncrement:!0})},this.#openDBRequest.onsuccess=e=>{this.#dataBase=e.target.result;const t=this.#map.get("init");for(const e of t)e()},this.#openDBRequest.onerror=e=>{alert("Precisamos que você permita o acesso para que você seja capaz de salvar o progresso do seu trabalho de edição")},this.#dataBase&&(this.#dataBase.onerror=e=>{alert(`Database error: ${e.target.errorCode}`)})}get RW_MODE(){return READ_WRITE}get RO_MODE(){return READ_ONLY}on(e,t){let s=this.#map.get(e);s||(s=[],this.#map.set(e,s)),s.push(t)}getTransation(e=READ_WRITE,...t){return this.#dataBase.transaction(t,e)}save(e,t,s){this.getTransation(READ_WRITE,e).objectStore(e).put(s,t)}delete(e,t){this.getTransation(READ_WRITE,e).objectStore(e).delete(t)}listAllValues(e,t){this.getTransation(READ_ONLY,e).objectStore(e).getAll().onsuccess=e=>{t(e.target.result)}}listAllKeys(e,t){this.getTransation(READ_ONLY,e).objectStore(e).getAllKeys().onsuccess=e=>{t(e.target.result)}}find(e,t,s){this.getTransation(READ_ONLY,e).objectStore(e).get(t).onsuccess=e=>{s(e.target.result)}}}export const justineDB=new JustineDB;
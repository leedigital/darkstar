import Document from"./Document.js";import{MOUSE}from"./util/Mouse.js";import{UTIL}from"./util/Util.js";const point={x:0,y:0},arrrowObject={x:0,y:0,start:!1};let lock=!1;export default class Page{constructor(document,pageObject){this.title="",this.document=null,this.pageElement=null,this.context2d=this.context2dLayer=null,this.pageObject=null,this.number=0,this.height=0,this.width=0,this.drag=!1;const doc=window.document,pageElement=doc.createElement("div");pageElement.tabIndex=-1,pageElement.setAttribute("data-ld-src",`page-panel-${pageObject.pageNumber}`);const canvasContainer=doc.createElement("span");canvasContainer.style="position: relative; display:inline-block";const canvas=doc.createElement("canvas");canvas.setAttribute("data-ld-src",`canvas-render-${pageObject.pageNumber}`);const context2d=canvas.getContext("2d"),canvasLayer=doc.createElement("canvas");canvasLayer.onmousedown=this.onmousedown.bind(this),canvasLayer.onmouseup=this.onmouseup.bind(this),canvasLayer.onmousemove=this.onmousemove.bind(this),canvasLayer.onmouseleave=this.onmouseleave.bind(this),canvasLayer.setAttribute("data-ld-src",`canvas-render-${pageObject.pageNumber}`),canvasLayer.style="position:absolute; left:0px; top: 0px;";const context2dLayer=canvasLayer.getContext("2d");canvasContainer.appendChild(canvas),canvasContainer.appendChild(canvasLayer),pageElement.appendChild(canvasContainer),Object.defineProperties(this,{document:{get:()=>document},pageElement:{get:()=>pageElement},context2d:{get:()=>context2d},context2dLayer:{get:()=>context2dLayer},pageObject:{get:()=>pageObject},number:{get:()=>pageObject.pageNumber},pageIndex:{get:()=>pageObject.pageIndex},height:{get:()=>canvas.height},width:{get:()=>canvas.width}}),this.scale=1,this.history=null,this.undoStartFlag=!1,this.undoClearFlag=!1,this.undoHistory=[],this.redoHistory=[]}focus(){this.pageElement.focus()}render(scale){this.scale=scale;const page=this.pageObject,viewport=page.getViewport({scale:scale}),context=this.context2d,canvas=context.canvas,canvasLayer=this.context2dLayer.canvas;canvasLayer.height=canvas.height=viewport.height,canvasLayer.width=canvas.width=viewport.width;const renderContext={canvasContext:context,viewport:viewport};page.render(renderContext)}redo(){const redo=this.redoHistory;if(redo.length>0){if(lock)return;lock=!0;const history=redo.pop();this.undoHistory.push(history),history.run(),lock=!1}else UTIL.alert("Não existem ações a serem refeitas")}undo(){const undoHistory=this.undoHistory;if(undoHistory.length>0){if(lock)return;lock=!0,this.undoClearFlag&&(this.undoClearFlag=!1);const history=undoHistory.pop();history instanceof Clean||(this.clear(),this.redoHistory.push(history),this.undoStartFlag=!0);for(const history of undoHistory)history.run();lock=!1}else UTIL.alert("Não existem ações a serem desfeitas")}get point(){const canvas=this.context2d.canvas,contentElement=this.document.contentElement,headerElement=this.document.headerElement;let x=MOUSE.x+contentElement.scrollLeft-canvas.offsetParent.parentElement.offsetLeft-canvas.offsetParent.offsetLeft-canvas.offsetLeft,y=MOUSE.y+contentElement.scrollTop-canvas.offsetParent.parentElement.offsetTop-canvas.offsetParent.offsetTop-canvas.offsetTop-headerElement.offsetHeight;return point.x=x*canvas.width/canvas.clientWidth,point.y=y*canvas.height/canvas.clientHeight,point}onmousedown(evt){const point=this.point,x=point.x,y=point.y;this.startPaint(x,y)}onmousemove(evt){const point=this.point,x=point.x,y=point.y;this.paint(x,y)}onmouseup(evt){this.closePaint()}onmouseleave(evt){this.closePaint()}startPaint(x,y){this.undoStartFlag&&(this.undoStartFlag=!1,this.redoHistory.length=0),this.undoClearFlag&&(this.undoClearFlag=!1,this.redoHistory.length=0,this.undoHistory.length=0);const doc=this.document;this.drag=!0;const context2d=this.context2dLayer,history=this.history=new History(context2d);context2d.save(),context2d.beginPath();const lineColor=context2d.strokeStyle=this.lineColor,lineWidth=context2d.lineWidth=this.lineWidth,lineJoin=context2d.lineJoin=this.lineJoin,lineCap=context2d.lineCap=this.lineCap,globalAlpha=context2d.globalAlpha=this.opacityColorValue;this.history.addMethod("this.context2d.save();\n"),this.history.addMethod("this.context2d.beginPath();\n"),history.addProperty("this.context2d.strokeStyle",`'${lineColor}'`),history.addProperty("this.context2d.lineWidth",`'${lineWidth}'`),history.addProperty("this.context2d.lineJoin",`'${lineJoin}'`),history.addProperty("this.context2d.lineCap",`'${lineCap}'`),history.addProperty("this.context2d.globalAlpha",globalAlpha),doc.isHandEdit?this.startHandPaint(x,y):doc.isArrowEdit?this.startArrowPaint(x,y):doc.isLineEdit?this.startLinePaint(x,y):doc.isDashedLineEdit?this.startDashedLinePaint(x,y):this.eraser&&this.startEraserPaint(x,y)}paint(x,y){if(this.drag){const doc=this.document;doc.isHandEdit?this.handPaint(x,y):this.eraser&&this.eraserPaint(x,y)}}closePaint(){if(this.drag){const context2d=this.context2dLayer,doc=this.document,point=this.point,x=point.x,y=point.y;doc.isHandEdit?this.closeHandPaint(x,y):doc.isArrowEdit?this.closeArrowPaint(x,y):doc.isLineEdit?this.closeLinePaint(x,y):doc.isDashedLineEdit?this.closeDashedLinePaint(x,y):this.eraser&&this.closeEraserPaint(x,y),context2d.closePath(),context2d.restore(),this.history.addMethod("this.context2d.closePath();\n"),this.history.addMethod("this.context2d.restore();\n"),this.history&&(this.history.run=Function(this.history.str),this.undoHistory.push(this.history),this.history=null)}this.drag=!1}startHandPaint(x,y){const context2d=this.context2dLayer;context2d.lineTo(x,y),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`)}handPaint(x,y){const context2d=this.context2dLayer;context2d.lineTo(x,y),context2d.stroke(),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`),this.history.addMethod("this.context2d.stroke();\n")}closeHandPaint(x,y){}startLinePaint(x,y){const context2d=this.context2dLayer;context2d.lineTo(x,y),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`)}closeLinePaint(x,y){const context2d=this.context2dLayer;context2d.lineTo(x,y),context2d.stroke(),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`),this.history.addMethod("this.context2d.stroke();\n")}startDashedLinePaint(x,y){const context2d=this.context2dLayer;context2d.setLineDash([this.lineWidth,2*this.lineWidth]),context2d.lineTo(x,y),this.history.addMethod(`this.context2d.setLineDash([${this.lineWidth}, ${2*this.lineWidth}]);\n`),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`)}closeDashedLinePaint(x,y){const context2d=this.context2dLayer;context2d.lineTo(x,y),context2d.stroke(),context2d.setLineDash([]),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`),this.history.addMethod("this.context2d.stroke();\n"),this.history.addMethod("this.context2d.setLineDash([]);\n")}startArrowPaint(x,y){const context2d=this.context2dLayer;arrrowObject.x=x,arrrowObject.y=y,arrrowObject.start=!0,context2d.lineTo(x,y),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`)}closeArrowPaint(x,y){if(!arrrowObject.start)return;const context2d=this.context2dLayer,headlen=5*this.lineWidth,dx=x-arrrowObject.x,dy=y-arrrowObject.y,angle=Math.atan2(dy,dx);context2d.lineTo(x,y),context2d.lineTo(x-headlen*Math.cos(angle-Math.PI/6),y-headlen*Math.sin(angle-Math.PI/6)),context2d.moveTo(x,y),context2d.lineTo(x-headlen*Math.cos(angle+Math.PI/6),y-headlen*Math.sin(angle+Math.PI/6)),context2d.stroke(),this.history.addMethod(`this.context2d.lineTo(${x},${y});\n`),this.history.addMethod(`this.context2d.lineTo(${x-headlen*Math.cos(angle-Math.PI/6)}, ${y-headlen*Math.sin(angle-Math.PI/6)});\n`),this.history.addMethod(`this.context2d.moveTo(${x},${y});\n`),this.history.addMethod(`this.context2d.lineTo(${x-headlen*Math.cos(angle+Math.PI/6)}, ${y-headlen*Math.sin(angle+Math.PI/6)});\n`),this.history.addMethod("this.context2d.stroke();\n"),arrrowObject.start=!1}startEraserPaint(x,y){const context2d=this.context2dLayer,len=this.eraserLength;context2d.clearRect(x,y,len,len),this.history.addMethod(`this.context2d.clearRect(${x}, ${y}, ${len}, ${len});\n`)}eraserPaint(x,y){const context2d=this.context2dLayer,len=this.eraserLength;context2d.clearRect(x,y,len,len),this.history.addMethod(`this.context2d.clearRect(${x}, ${y}, ${len}, ${len});\n`)}closeEraserPaint(x,y){}get lineColor(){return this.document.currentColor}get lineWidth(){return this.document.lineWidth}get lineCap(){return"round"}get lineJoin(){return"round"}get eraser(){return this.document.eraser}get eraserLength(){return 10*this.document.eraserLength}get opacityColorValue(){return this.document.opacityColorValue}clear(){const context2d=this.context2dLayer;context2d.save(),context2d.clearRect(0,0,this.width,this.height),context2d.restore()}clearCache(){this.undoClearFlag=!0,this.redoHistory.length=0,this.undoHistory.push(new Clean)}save(){const localStorage=window.localStorage,json=JSON.stringify(this.undoHistory);localStorage.setItem(this.documentTitle,json)}restore(){const localStorage=window.localStorage,json=localStorage.getItem(this.documentTitle),tmp=JSON.parse(json);if(tmp)for(let i=0,len=tmp.length;i<len;i++){const value=tmp[i],history=new History(this.context2dLayer);history.str=value.str,history.run=Function(history.str),this.undoHistory.push(history),history.run()}}get documentTitle(){return`${this.title}_${this.number}`}}class History{constructor(context2d){this.context2d=context2d,this.run=null,this.str=""}addProperty(param,value){this.str=this.str.concat(`${param}=${value};\n`)}addMethod(value){this.str=this.str.concat(`${value}\n`)}}class Clean{}